DROP TABLE IF EXISTS image_store;

CREATE TABLE image_store (
    image_id SERIAL PRIMARY KEY,
    image_data BYTEA NOT NULL
);

DROP TABLE IF EXISTS cuisines;
CREATE TABLE cuisines (
    cuisine_id SERIAL PRIMARY KEY,
    cuisine_name VARCHAR (255) UNIQUE NOT NULL
);

DROP TABLE IF EXISTS users;
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR (255) NOT NULL,
    user_name VARCHAR (255) UNIQUE NOT NULL,
    email VARCHAR (355) UNIQUE NOT NULL,
    password TEXT UNIQUE NOT NULL,
    created_on TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS recipes;
CREATE TABLE recipes (
    recipe_id SERIAL,
    recipe_name VARCHAR (255) UNIQUE NOT NULL,
    r_time INTEGER NOT NULL,
    num_servings INTEGER NOT NULL,
    difficulty VARCHAR (255) NOT NULL,
    image_id INTEGER NOT NULL,
    cuisine_id INTEGER NOT NULL,
    PRIMARY KEY (recipe_id),
    CONSTRAINT recipes_image_id_fkey FOREIGN KEY (image_id)
        REFERENCES image_store (image_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT recipes_cuisine_id_fkey FOREIGN KEY (cuisine_id)
        REFERENCES cuisines (cuisine_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS ingredients;
CREATE TABLE ingredients (
    ingredient_id SERIAL,
    ingredient_name VARCHAR (255) NOT NULL,
    image_id INTEGER NOT NULL,
    PRIMARY KEY (ingredient_id),
    CONSTRAINT ingredients_image_id_fkey FOREIGN KEY (image_id)
        REFERENCES image_store (image_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS saved_recipes;
CREATE TABLE saved_recipes (
    user_id INTEGER NOT NULL,
    recipe_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, recipe_id),
    CONSTRAINT saved_recipe_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES users (user_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT saved_recipe_recipe_id_fkey FOREIGN KEY (recipe_id)
        REFERENCES recipes (recipe_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE
);

DROP TABLE IF EXISTS recipe_ingredients;
CREATE TABLE recipe_ingredients (
    ingredient_id INTEGER NOT NULL,
    recipe_id INTEGER NOT NULL,
    amount INTEGER NOT NULL,
    PRIMARY KEY (ingredient_id, recipe_id ),
    CONSTRAINT saved_recipe_ingredient_id_fkey FOREIGN KEY (ingredient_id)
        REFERENCES ingredients (ingredient_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT saved_recipe_recipe_id_fkey FOREIGN KEY (recipe_id)
        REFERENCES recipes (recipe_id) MATCH SIMPLE
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE PROCEDURE getAllRecipes()
LANGUAGE plpgsql
AS $getAllRecipes$
BEGIN
    SELECT recipe_id, recipe_name, r_time, num_servings, difficulty, c.cuisine_name, i.image_data FROM recipes r INNER JOIN image_store i ON r.image_id = i.image_id
    INNER JOIN cuisines c ON r.cuisine_id = c.cuisine_id;
END;
$getAllRecipes$;


CREATE PROCEDURE getAllCuisine()
LANGUAGE plpgsql
AS $getAllCuisine$
BEGIN
    SELECT cuisine_id, cuisine_name FROM cuisines;
END;
$getAllCuisine$;


CREATE PROCEDURE getRecipeIngredients(recipe_idi INTEGER)
LANGUAGE plpgsql
AS $getRecipeIngredients$
BEGIN
    SELECT ing.ingredient_id, ing.ingredient_name, ri.amount, i.image_data FROM ingredients ing INNER JOIN recipe_ingredients ri ON ing.ingredient_id = ri.ingredient_id
    AND ri.recipe_id = recipe_idi
    INNER JOIN image_store i ON ing.image_id = i.image_id;
END;
$getRecipeIngredients$;


CREATE PROCEDURE getUserRecipes(user_idi INTEGER)
LANGUAGE plpgsql
AS $getUserRecipes$
BEGIN
    SELECT s.user_id, s.recipe_id FROM saved_recipes s
    INNER JOIN recipes r ON r.recipe_id = s.recipe_id
    AND s.user_id = user_idi;

END;
$getUserRecipes$;


CREATE PROCEDURE removeUserRecipes(user_idi INTEGER, recipe_idi INTEGER)
LANGUAGE plpgsql
AS $removeUserRecipes$
BEGIN
    DELETE FROM saved_recipes WHERE saved_recipes.user_id = user_idi AND saved_recipes.recipe_id = recipe_idi;
END;
$removeUserRecipes$;


CREATE PROCEDURE addUserRecipes(user_idi INTEGER, recipe_idi INTEGER)
LANGUAGE plpgsql
AS $addUserRecipes$
BEGIN
    INSERT INTO saved_recipes (user_id, recipe_id)
    VALUES (user_idi, recipe_idi);
END;
$addUserRecipes$;